@page "/login"
@namespace LoginComponent
@using blazor_hospital.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@using System.Text.Json
@using System.Text.Json.Serialization
@using blazor_hospital.Models
@inject IHttpClientFactory _clientFactory


@*
<AuthorizeView>
    <NotAuthorized>
        <div class="card-header">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="username"/>
        </div>
        <div class="card-header">
            <label> Password: </label>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color:red">@errorMessage</div>

        <a href="" @onclick="PerformLogin">
            Login
        </a>
    </NotAuthorized>
 
</AuthorizeView>
*@


@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (users is null )
{
    <div class="h4">Loading...</div>
}
else
{

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        

        <div class="form-group">
            <label>Username</label>
            <input type="text" placeholder="user name" @bind-value="users"/>
        </div>

        <div class="form-group">
            <label>Password</label>
            <input type="password" placeholder="password" @bind-value="users"/>
        </div>
        <a href="" @onclick="PerformLogin">
            Login
        </a>
    </div>
</div>




@code {
  
    IList<User> users;
    string errorString;
    private string username;
    private string password;
    
    
    public async Task PerformLogin() {
        errorString = "";
        try {
            
            var client = _clientFactory.CreateClient("ServerName");
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://localhost:8080/patients/" + users.Count),
            };
            using (var response = await client.SendAsync(request))
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                Console.WriteLine(body);
                ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
                username = "";
                password = "";
             
            }
        }
        catch (Exception ex)
        {
        }
    }

}
    /*
    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        } catch (Exception e) { }
    }
    */

}